{"version":3,"sources":["/Users/humbertomangino/Documents/react-native/lla-ec/components/Button.js","/Users/humbertomangino/Documents/react-native/lla-ec/components/Prompt.js","/Users/humbertomangino/Documents/react-native/lla-ec/App.js","/Users/humbertomangino/Documents/react-native/lla-ec/web-build/register-service-worker.js"],"names":["styles","StyleSheet","create","wrapper","padding","display","borderRadius","borderWidth","borderColor","marginBottom","alignItems","buttonText","fontSize","width","textAlign","ButtonTextWrapper","flexDirection","justifyContent","Button","props","text","icon","textColor","backgroundColor","onPress","color","TouchableOpacity","style","View","Text","PROMPT_QUERY","gql","container","flex","prompt","Prompt","useQuery","loading","data","refetch","useEffect","title","httpLink","HttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","App","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console"],"mappings":"6LAsBMA,EAASC,IAAWC,OAAO,CAC/BC,QAAS,CACPC,QAAS,GACTC,QAAS,OACTC,aAAc,GACdC,YAAa,EACbC,YAAa,QACbC,aAAc,GACdC,WAAY,UAEdC,WAAY,CACVC,SAAU,GACVC,MAAO,MACPC,UAAW,UAEbC,kBAAmB,CACjBC,cAAe,MACfC,eAAgB,cAILC,EAxCA,SAACC,GAAW,IACjBC,EAAoDD,EAApDC,KAAMC,EAA8CF,EAA9CE,KAAMC,EAAwCH,EAAxCG,UAAWC,EAA6BJ,EAA7BI,gBAAiBC,EAAYL,EAAZK,QAC1CC,EAAQH,GAAa,QAC3B,OACE,kBAACI,EAAA,EAAD,CACEF,QAAS,kBAAMA,GAAWA,KAC1BG,MAAO,CACL3B,EAAOG,QACP,CAAEoB,gBAAiBA,GAAmB,iBAGxC,kBAACK,EAAA,EAAD,CAAMD,MAAO3B,EAAOe,mBACjBM,EACD,kBAACQ,EAAA,EAAD,CAAMF,MAAO,CAAC,CAAEF,SAASzB,EAAOW,aAAcS,M,2ICTtD,IAAMU,E,MAAeC,GAAH,KAgCZ/B,EAASC,IAAWC,OAAO,CAC/B8B,UAAW,CACTC,KAAM,EACNV,gBAAiB,OACjBb,WAAY,SACZO,eAAgB,UAEnBiB,OAAQ,CACPtB,SAAU,GACVa,MAAO,QACPX,UAAW,YAIEqB,EArCA,WAAO,IAAD,EACeC,YAASN,GAApCO,EADY,EACZA,QAASC,EADG,EACHA,KAAMC,EADH,EACGA,QAIvB,OAHAC,qBAAU,WACPD,MACC,IAEH,kBAACX,EAAA,EAAD,CAAMD,MAAO3B,EAAOgC,YACjBK,GAAWC,GAAQA,EAAKJ,QAC1B,kBAACL,EAAA,EAAD,CAAMF,MAAO3B,EAAOkC,QAASI,EAAKJ,OAAOO,OAEzC,kBAAC,EAAD,CACCrB,KAAK,OACLE,UAAU,UACVC,gBAAgB,UACZC,QAAS,WACZe,SCtBCG,EAAW,IAAIC,IAAS,CAC5BC,IAHe,kDAMXC,EAAS,IAAIC,IAAa,CAC9BC,KAAML,EACNM,MAAO,IAAIC,MAWEC,IARH,WACV,OACE,kBAAC,IAAD,CAAgBL,OAAQA,GACtB,kBAAC,EAAD,S,4DCnBF,kBAAmBM,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,iCAAkC,CAAEC,MAAO,aACpDC,MAAK,SAASC,OAGdC,OAAM,SAASC,GACdC,QAAQH,KAAK,oCAAqCE,W","file":"static/js/app.0a8600b6.chunk.js","sourcesContent":["import React from 'react';\nimport { Text, View, TouchableOpacity, StyleSheet } from 'react-native';\n\nconst Button = (props) => {\n  const { text, icon, textColor, backgroundColor, onPress } = props;\n  const color = textColor || 'white';\n  return (\n    <TouchableOpacity\n      onPress={() => onPress && onPress()}\n      style={[\n        styles.wrapper,\n        { backgroundColor: backgroundColor || 'transparent' },\n      ]}\n    >\n      <View style={styles.ButtonTextWrapper}>\n        {icon}\n        <Text style={[{ color }, styles.buttonText]}>{text}</Text>\n      </View>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    padding: 25,\n    display: 'flex',\n    borderRadius: 40,\n    borderWidth: 1,\n    borderColor: 'white',\n    marginBottom: 15,\n    alignItems: 'center'\n  },\n  buttonText: {\n    fontSize: 16,\n    width: '90%',\n    textAlign: 'center'\n  },\n  ButtonTextWrapper: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end'\n  }\n});\n\nexport default Button;","import React, { useEffect }  from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport Button from './Button';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\n// queries\nconst PROMPT_QUERY = gql`\n\tquery {\n\t\tprompt {\n\t\t\ttitle\n\t\t\tid\n\t\t}\n\t}\n`;\n\nconst Prompt = () => {\n\tconst { loading, data, refetch } = useQuery(PROMPT_QUERY);\n\tuseEffect(() => {\n    refetch();\n  }, []);\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t{!loading && data && data.prompt && ( \n\t\t\t<Text style={styles.prompt}>{data.prompt.title}</Text>\n\t\t\t)}\n\t\t\t<Button\n\t\t\t\ttext=\"Next\"\n\t\t\t\ttextColor=\"#161616\"\n\t\t\t\tbackgroundColor=\"#d3d3d3\"\n        onPress={() => {\n\t\t\t\t\trefetch();\n\t\t\t\t}}\n\t\t\t\t/>\n    </View>\n\t);\n  \n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n\t},\n\tprompt: {\n\t\tfontSize: 24,\n\t\tcolor: 'black',\n\t\ttextAlign: 'center'\n\t}\n});\n\nexport default Prompt;\n","import React from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport Prompt from './components/Prompt';\n\nconst BASE_URL = 'https://floating-thicket-10292.herokuapp.com/';\n\nconst httpLink = new HttpLink({\n  uri: BASE_URL\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Prompt />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/lla-ec/expo-service-worker.js', { scope: '/lla-ec/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}